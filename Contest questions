Q1. Leetcode contest question. # 

Input: names = ["Mary","John","Emma"], heights = [180,165,170]
Output: ["Mary","Emma","John"]
Explanation: Mary is the tallest, followed by Emma and John.

solution -> 

class Solution {
public:
    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {
        vector<pair<int,string>> vp;
        for(int i=0;i<heights.size();i++){
            vp.push_back({heights[i],names[i]});
        }
        sort(vp.rbegin(),vp.rend());
        vector<string> ans;
        for(int i=0;i<names.size();i++){
            ans.push_back(vp[i].second);
        }
        return ans;
    }
};

Q2. Leetcode contest question . #Medium
class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        int maxi = 0;
        for(int num : nums){
            maxi = max(maxi,num);
        }
        int count = 0, ans = 1;
        for(int num : nums){
            if(num==maxi){
                count++;
            }else{
                count = 0;
            }
            ans = max(count,ans);
        }
        return ans;
    }
};

Vitrual contest of 2nd october.
Q1. Number of Common Factors.
Input: a = 12, b = 6
Output: 4
Explanation: The common factors of 12 and 6 are 1, 2, 3, 6.
Solution -> 
class Solution {
public:
    int commonFactors(int a, int b) {
        int count = 0;
        int n = min(a,b);
        for(int i=1;i<=n;i++){
            if(a%i==0 && b%i==0){
                count++;
            }
        }
        return count;
    }
};

Q2. Maximum Sum of an Hourglass
Input: grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]
Output: 30
Explanation: The cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30.
Solution->
class Solution {
public:
    int maxSum(vector<vector<int>>& grid) {
        int max_sum = INT_MIN;
        int sum = 0;
        int n = grid.size();
        int m = grid[0].size();
        for(int i=0;i<n-2;++i){
            for(int j=0;j<m-2;++j){
                sum = grid[i][j]+grid[i][j+1]+grid[i][j+2]+grid[i+1][j+1]+grid[i+2][j]+grid[i+2][j+1]+grid[i+2][j+2];
                max_sum = max(max_sum,sum);
            }
        }
        return max_sum;
    }
};
